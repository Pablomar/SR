/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package scoreboard;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

import scoreboard.entities.Game;
import scoreboard.exceptions.TeamAlreadyPlayingException;
import scoreboard.sampledata.TestTeams;

class ScoreBoardTest {
  ScoreBoard scoreBoard = new ScoreBoard();

  @Test
  void whenAGameIsStarted_thenACorrectGameIsCreated() {
    Game game;
    try {
      game = scoreBoard.startGame(TestTeams.SPAIN, TestTeams.GERMANY);
      assertEquals(game.getHomeTeam().getId(), TestTeams.SPAIN.getId());
      assertEquals(game.getAwayTeam().getId(), TestTeams.GERMANY.getId());
      assertEquals(game.getHomeScore(), 0);
      assertEquals(game.getAwayScore(), 0);
    } catch (TeamAlreadyPlayingException e) {
    }
  }

  @Test
  void whenAGameIsStarted_thenItAppearsInSummary() {
    try {
      scoreBoard.startGame(TestTeams.SPAIN, TestTeams.GERMANY);
      assertTrue(scoreBoard.getSummary().stream()
          .anyMatch((Game game) -> game.getHomeTeam().getId().equals(TestTeams.SPAIN.getId())
              && game.getAwayTeam().getId().equals(TestTeams.GERMANY.getId())));
    } catch (TeamAlreadyPlayingException e) {
    }

  }

  @Test
  void whenAGameIsDeleted_thenItIsRemovedFromSummary() {
    Game currentGame;
    try {
      currentGame = scoreBoard.startGame(TestTeams.SPAIN, TestTeams.GERMANY);
      assertTrue(scoreBoard.getSummary().stream()
          .anyMatch((Game game) -> game.getHomeTeam().getId().equals(TestTeams.SPAIN.getId())
              && game.getAwayTeam().getId().equals(TestTeams.GERMANY.getId())));
      scoreBoard.finishGame(currentGame);
      assertFalse(scoreBoard.getSummary().stream()
          .anyMatch((Game game) -> game.getHomeTeam().getId().equals(TestTeams.SPAIN.getId())
              && game.getAwayTeam().getId().equals(TestTeams.GERMANY.getId())));
    } catch (TeamAlreadyPlayingException e) {
    }

  }

  @Test
  void whenAGameIsUpdated_thenTheSumaryIsUpdated() {
    Game currentGame;
    try {
      currentGame = scoreBoard.startGame(TestTeams.SPAIN, TestTeams.GERMANY);
      scoreBoard.updateScore(currentGame, 2, 4);
      assertTrue(scoreBoard.getSummary().stream()
          .anyMatch((Game game) -> game.getHomeTeam().getId().equals(TestTeams.SPAIN.getId())
              && game.getAwayTeam().getId().equals(TestTeams.GERMANY.getId()) && game.getHomeScore() == 2
              && game.getAwayScore() == 4));
      assertTrue(scoreBoard.getSummary().size() == 1);
    } catch (TeamAlreadyPlayingException e) {
    }
  }

  @Test
  void whenASummaryIsRequested_thenTheCorrectDataIsPresent() {
  }
}
